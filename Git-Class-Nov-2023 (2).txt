Git Class-1:

1. git --version --> to check the version of the git in the local machine
2. sudo yum install git -y --> install git in RHEL based linux OS
3. git status --> this is to check if the repo is initilised or not and also to track the changes of files/folders
4. git init --> initilise the git repo locally
5. git clone <repo> --> To download/clone the repo(remote) from Github to local machine for the first time. 

Assignments:
1. Create a github account.
2. Create a public and private repo Github.
3. Clone both the repos from github to local. Try cloning private repo without any errors in your local machines.

----------------------------------------------------------
Git class-2

1. Git Architecture
1.1. Working Directory:
		This is where you create, modify, and delete your files.
		Files in this directory are not tracked by Git until you explicitly tell Git to start tracking them.

1.2. Staging Area (Index):
		After making changes in the working directory, you can selectively choose which changes to include in the next commit by staging them.
		Staging is like preparing a snapshot of the changes you want to commit.

1.3. Local Repository:
		The committed changes from the staging area are then stored in the local repository.
		The local repository is on your machine and contains all the project's version history.

1.4. Remote Repository (GitHub, GitLab, Bitbucket, etc.):
		To collaborate with others and have a remote backup, you can push your changes to a remote repository.
		This allows multiple developers to work on the same project, sharing their changes.

6. git add <filename> --> Adds changes from the working directory to the staging area (index). This marks the changes as ready to be committed
7. git commit -m "<message here>" --> Commits the changes that are staged in the index to the local repository. The -m flag allows you to include a commit message describing the changes.
8. git push --> Pushes committed changes from the local repository to a remote repository. This is typically used in a collaborative environment where multiple developers are working on the same project.
9. git log --> Displays a log of all commits in the current branch. It shows the commit hash, author, date, and commit message.

-----------------------------------------------------------
Git Class-3
10. git pull -> pull the latest changes from the remote repository to the local.

2. GIT BRANCHES
11. git branch --> Lists all the branches in the repository. The current branch is highlighted with an asterisk.
12. git branch <branch_name> --> Creates a new branch with the specified name. The new branch is based on the current branch.
13. git switch <branch_name> --> Switches to the specified branch. This command is used to navigate between different branches in the repository.
14. git branch -m <new branch name> --> Renames the current branch to the specified new name.
15. git branch -d <branch_name> --> Deletes the specified branch. The branch must be fully merged into the current branch before deletion.

3. Head concept:
In Git, HEAD is a special pointer or reference that points to the latest commit in the currently checked-out branch. It represents the most recent commit on the current branch and serves as a reference point for various Git operations.


4. Merge conflict
	A merge conflict occurs when Git is unable to automatically merge changes from different branches. This typically happens when:
	*Two branches have changes in the same part of a file.
	*One branch has modified a file, and the other branch has deleted the same file.
	*Both branches have made changes, and Git cannot determine which changes to incorporate.

	When a merge conflict occurs, Git marks the conflicted areas in the affected files. It's then the responsibility of the developer to resolve the conflict by manually choosing which changes to keep. The conflicted areas in the file are surrounded by special markers (e.g., <<<<<<<, =======, and >>>>>>>). After resolving the conflict, the changes are staged, and the merge can be completed.


Assignments:
1. Git pull vs git fetch vs git clone
2. git merge vs git rebase
3. git checkout vs git switch
4. git diff command for file and branch comparision



-----------------------------------------------------------------------------------------------------------------
Git Class-4

16. https://<git_token>@github.com/<account_name>/<repo_name>.git   ---> Push or pull the changes using PAT(Personal Access Token)

17. git checkout -b <new_branch> --> Creates a new branch (<new_branch>) and switches to it. It is a shorthand for creating a new branch and checking it out in a single command.

18. git merge <branch_name> --> Merges changes from the specified branch (<branch_name>) into the current branch.

19. git rebase <branch_name> --> Applies the changes of the current branch on top of the specified branch (<branch_name>). This can lead to a cleaner commit history compared to git merge.

20. git rebase -i HEAD~N --> Initiates an interactive rebase on the last N commits. Allows you to modify, squash, or reorder commits interactively.

-----------------------------------------------------------------------------------------------------------------
Git Class-5

21. git reflog --> Shows a log of all reference changes in the repository, including branch checkout, commit amends, and other operations. Useful for recovering lost commits.
22. git cherry-pick <commit-ID> --> Applies the changes introduced by a specific commit (<commit-ID>) to the current branch.
23. git stash --> Temporarily saves changes that are not ready to be committed, allowing you to switch branches or perform other operations.
24. git stash pop --> Applies the changes stored in the most recent stash and removes it from the stash list.
       git stash apply -->Applies the changes stored in the most recent stash and but it doest not removes it from the stash list.
	   git stash list --> gives list of all files which are stashed
	   git stash drop -->removes files from stash list
25. git squash concept --> Squashing is the process of combining multiple commits into a single commit. It's often used to create a cleaner and more comprehensible commit history.

.gitignore file:
		A file used to specify intentionally untracked files and directories that Git should ignore. Commonly used for excluding build artifacts, temporary files, and sensitive information.

26. git clone <git_repo_url> -b <branch_name> --> Clones a remote repository from the specified URL and checks out a specific branch (<branch_name>) immediately.

Pull Request:
	In a collaborative Git workflow, a pull request is a way to propose changes from a branch in one repository to another repository. It allows others to review the changes before merging.

Assignments:
1.git tag
2. git revert vs git reset vs git restore
3. Create a Pull request, Add collaborators and get atleast 2 reviews.
4. understand what is Github actions.


Linux Aliases in the .bashrc
alias gl="git log --oneline"
alias gb="git branch"
alias gs="git switch"

